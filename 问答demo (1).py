# -*- coding: utf-8 -*-
"""问答demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W9qb0eINn7Q6TXBSv4TYsroIpYjSgYNP
"""

!git clone https://github.com/TENaaa/Question-Answering-Dataset.git

!pip install llama-index
!pip install openai
!pip install langchain

# 设置API密钥
os.environ["OPENAI_API_KEY"] = input("请输入你的chat api密钥")

import os
from llama_index import SimpleDirectoryReader, GPTListIndex, GPTSimpleVectorIndex, LLMPredictor, PromptHelper
from langchain import OpenAI
from IPython.display import Markdown, display



# 定义GPT索引
def construct_index(directory_path):
    # set maximum input size
    max_input_size = 4096
    # set number of output tokens
    num_outputs = 2000
    # set maximum chunk overlap
    max_chunk_overlap = 3
    # set chunk size limit
    chunk_size_limit = 10000

    # define LLM
    llm_predictor = LLMPredictor(llm=OpenAI(api_key=os.environ["OPENAI_API_KEY"], temperature=0.5, model_name="text-davinci-002"))
    prompt_helper = PromptHelper(max_input_size, num_outputs, max_chunk_overlap, chunk_size_limit=chunk_size_limit)
 
    documents = SimpleDirectoryReader(directory_path).load_data()
    
    index = GPTSimpleVectorIndex(documents, llm_predictor=llm_predictor, prompt_helper=prompt_helper)

    index.save_to_disk('index.json')

    return index


# 定义问答函数
def ask_ai():
    # 加载索引
    index = GPTSimpleVectorIndex.load_from_disk('index.json')
    while True: 
        # 输入问题
        query = input("What do you want to ask? ")
        # 进行查询
        response = index.query(query, response_mode="compact")
        # 显示回答
        display(Markdown(f"Response: <b>{response.response}</b>"))

# 构建索引
construct_index("/content/Question-Answering-Dataset")

# 进行问答
ask_ai()

ask_ai()